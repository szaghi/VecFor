[modes]
modes = static-gnu-debug static-gnu shared-gnu-debug shared-gnu
        static-intel-debug shared-intel shared-intel-debug static-intel
        tests-gnu-debug tests-gnu
        tests-intel-debug tests-intel

[common-variables]
$CSHARED_GNU   = -c -fPIC -frealloc-lhs
$CSHARED_INT   = -c -fpic -assume realloc_lhs
$LSHARED       = -shared
$CSTATIC_GNU   = -c -frealloc-lhs
$CSTATIC_INT   = -c -assume realloc_lhs -fpp
$DEBUG_GNU     = -Og -g3 -Warray-bounds -Wcharacter-truncation -Wline-truncation -Wimplicit-interface -Wimplicit-procedure -Wunderflow -Wuninitialized -fcheck=all -fmodule-private -ffree-line-length-132 -fimplicit-none -fbacktrace -fdump-core -finit-real=nan -std=f2008 -fall-intrinsics
$DEBUG_INT     = -O0 -debug all -check all -warn all -extend-source 132 -traceback -gen-interfaces -fp-stack-check -fstack-protector-all -ftrapuv -no-ftz -std08
$OPTIMIZE      = -O2
$EXDIRS        = PENF/src/tests/ PENF/src/third_party/

# main modes
# GNU
[shared-gnu]
template  = template-shared-gnu
target    = vecfor.F90
build_dir = ./shared/
output    = libvecfor.so
mklib     = shared

[static-gnu]
template  = template-static-gnu
target    = vecfor.F90
build_dir = ./static/
output    = libvecfor.a
mklib     = static

[shared-gnu-debug]
template  = template-shared-gnu-debug
target    = vecfor.F90
build_dir = ./shared/
output    = libvecfor.so
mklib     = shared

[static-gnu-debug]
template  = template-static-gnu-debug
target    = vecfor.F90
build_dir = ./static/
output    = libvecfor.a
mklib     = static

[tests-gnu]
template  = template-static-gnu
build_dir = ./exe/

[tests-gnu-debug]
template  = template-static-gnu-debug
build_dir = ./exe/

# Intel
[shared-intel]
template  = template-shared-intel
target    = vecfor.F90
build_dir = ./shared/
output    = libvecfor.so
mklib     = shared

[static-intel]
template  = template-static-intel
target    = vecfor.F90
build_dir = ./static/
output    = libvecfor.a
mklib     = static

[shared-intel-debug]
template  = template-shared-intel-debug
target    = vecfor.F90
build_dir = ./shared/
output    = libvecfor.so
mklib     = shared

[static-intel-debug]
template  = template-static-intel-debug
target    = vecfor.F90
build_dir = ./static/
output    = libvecfor.a
mklib     = static

[tests-intel]
template = template-static-intel
build_dir = ./exe/

[tests-intel-debug]
template  = template-static-intel-debug
build_dir = ./exe/

#templates
# GNU
[template-shared-gnu]
compiler     = gnu
cflags       = $CSHARED_GNU $OPTIMIZE
lflags       = $LSHARED $OPTIMIZE
preproc      = -D_R16P_SUPPORTED
exclude_dirs = $EXDIRS
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
colors       = True
quiet        = False
log          = True
jobs         = 2

[template-static-gnu]
compiler     = gnu
cflags       = $CSTATIC_GNU $OPTIMIZE
lflags       = $OPTIMIZE
preproc      = -D_R16P_SUPPORTED
exclude_dirs = $EXDIRS
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
colors       = True
quiet        = False
log          = True
jobs         = 2

[template-shared-gnu-debug]
compiler     = gnu
cflags       = $CSHARED_GNU $DEBUG_GNU
lflags       = $LSHARED $DEBUG_GNU
preproc      = -D_R16P_SUPPORTED -DDEBUG
exclude_dirs = $EXDIRS
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
colors       = True
quiet        = False
log          = True
jobs         = 2

[template-static-gnu-debug]
compiler     = gnu
cflags       = $CSTATIC_GNU $DEBUG_GNU
lflags       = $DEBUG_GNU
preproc      = -D_R16P_SUPPORTED -DDEBUG
exclude_dirs = $EXDIRS
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
colors       = True
quiet        = False
log          = True
jobs         = 2

# Intel
[template-shared-intel]
compiler     = intel
cflags       = $CSHARED_INT $OPTIMIZE
lflags       = $LSHARED $OPTIMIZE
preproc      = -D_R16P_SUPPORTED
exclude_dirs = $EXDIRS
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
colors       = True
quiet        = False
log          = True
jobs         = 2

[template-static-intel]
compiler     = intel
cflags       = $CSTATIC_INT $OPTIMIZE
lflags       = $OPTIMIZE
preproc      = -D_R16P_SUPPORTED
exclude_dirs = $EXDIRS
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
colors       = True
quiet        = False
log          = True
jobs         = 2

[template-shared-intel-debug]
compiler     = intel
cflags       = $CSHARED_INT $DEBUG_INT
lflags       = $LSHARED $DEBUG_INT
preproc      = -D_R16P_SUPPORTED -DDEBUG
exclude_dirs = $EXDIRS
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
colors       = True
quiet        = False
log          = True
jobs         = 2

[template-static-intel-debug]
compiler     = intel
cflags       = $CSTATIC_INT $DEBUG_INT
lflags       = $DEBUG_INT
preproc      = -D_R16P_SUPPORTED -DDEBUG
exclude_dirs = $EXDIRS
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
colors       = True
quiet        = False
log          = True
jobs         = 2

# rules
[rule-makedoc]
help   = Build documentation from source files
rule_1 = rm -rf doc/html/*
rule_2 = ford doc/main_page.md --debug
rule_3 = cp -r doc/html/publish/* doc/html/
rule_4 = rm -rf doc/html/publish

[rule-deldoc]
help = Delete documentation
rule = rm -rf doc/html/*

[rule-delexe]
help = Delete exes
rule = rm -rf exe/

[rule-clean]
help = Clean the project tree
rule_1 = FoBiS.py rule -ex deldoc
rule_2 = FoBiS.py rule -ex delexe
rule_3 = rm -f *.gcov

[rule-maketar]
help = Make tar archive of the project
rule = tar --xform="s%^%VecFor/%" -czf VecFor.tar.gz *

[rule-makecoverage]
help   = Perform coverage analysis
rule_1 = FoBiS.py doctests -mode tests-gnu-debug -coverage --exclude_from_doctests penf_b_size.F90 penf.F90 penf_global_parameters_variables.F90 penf_stringify.F90 -keep_volatile_doctests
rule_2 = rm -f exe/obj/penf*
rule_3 = gcov -o exe/obj/ src/lib/vecfor*
rule_4 = rm -f *.gcov

[rule-makecoverage-analysis]
help   = Perform coverage analysis and saving reports in markdown
rule_1 = FoBiS.py doctests -mode tests-gnu-debug -coverage --exclude_from_doctests penf_b_size.F90 penf.F90 penf_global_parameters_variables.F90 penf_stringify.F90
rule_2 = rm -f exe/obj/penf*
rule_3 = gcov -o exe/obj/ src/lib/vecfor*
rule_4 = FoBiS.py rule -gcov_analyzer wiki/ Coverage-Analysis
rule_5 = rm -f *.gcov
